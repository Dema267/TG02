import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ö–Ω–æ–ø–∫–∏
def get_initial_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="show_more")
    return builder.as_markup()

def get_options_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–ø—Ü–∏—è 1", callback_data="option_1")
    builder.button(text="–û–ø—Ü–∏—è 2", callback_data="option_2")
    builder.adjust(2)
    return builder.as_markup()

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /dynamic, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.")

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /dynamic
@router.message(Command("dynamic"))
async def cmd_dynamic(message: types.Message):
    await message.answer("üîò –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=get_initial_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
@router.callback_query(F.data == "show_more")
async def on_show_more(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=get_options_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
@router.callback_query(F.data.in_({"option_1", "option_2"}))
async def on_option_selected(callback: types.CallbackQuery):
    text = "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: –û–ø—Ü–∏—è 1" if callback.data == "option_1" else "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: –û–ø—Ü–∏—è 2"
    await callback.message.answer(text)
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
