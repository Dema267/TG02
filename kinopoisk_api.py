import os
import requests
from typing import List, Dict, Optional
from dotenv import load_dotenv

load_dotenv()
API_KEY = os.getenv("KINOPOISK_API_KEY")

class KinopoiskAPI:
    BASE_URL = "https://api.kinopoisk.dev/v1.4"

    @staticmethod
    def search_movies(query: str, limit: int = 5) -> List[Dict]:
        headers = {
            "accept": "application/json",
            "X-API-KEY": API_KEY,
        }
        params = {
            "query": query,
            "limit": limit,
        }
        try:
            response = requests.get(f"{KinopoiskAPI.BASE_URL}/movie/search", headers=headers, params=params)
            response.raise_for_status()
            return response.json().get("docs", [])
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return []

    @staticmethod
    def get_popular_movies(limit: int = 5) -> List[Dict]:
        headers = {
            "accept": "application/json",
            "X-API-KEY": API_KEY,
        }
        params = {
            "limit": limit,
            "sortField": "votes.kp",
            "sortType": "-1",
            "type": "movie",
        }
        try:
            response = requests.get(f"{KinopoiskAPI.BASE_URL}/movie", headers=headers, params=params)
            response.raise_for_status()
            return response.json().get("docs", [])
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: {e}")
            return []

    @staticmethod
    def get_popular_series(limit: int = 5) -> List[Dict]:
        headers = {
            "accept": "application/json",
            "X-API-KEY": API_KEY,
        }
        params = {
            "limit": limit,
            "sortField": "votes.kp",
            "sortType": "-1",
            "type": "tv-series",
        }
        try:
            response = requests.get(f"{KinopoiskAPI.BASE_URL}/movie", headers=headers, params=params)
            response.raise_for_status()
            return response.json().get("docs", [])
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤: {e}")
            return []

    @staticmethod
    def format_movie_info(movie: Dict) -> str:
        name = movie.get("name", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        year = movie.get("year", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        rating = movie.get("rating", {}).get("kp", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        description = movie.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
        description = description[:300] + "..." if description else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        movie_url = f"https://www.kinopoisk.ru/film/{movie.get('id', '')}/"

        return (
            f"üé¨ <b>{name}</b> ({year})\n"
            f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"üîó <a href='{movie_url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫</a>\n"
            f"{'‚ïê' * 30}"
        )
